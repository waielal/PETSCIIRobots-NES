.segment "ZP0"
MENUY:      .RES 1
MENU_MORE:  .RES 1
INTRO_ANIM: .RES 1

.include "DATA.asm"
.include "IRQ.asm"
.include "NMI.asm"

.segment BANK(BK_MAIN_CODE)

.proc PRE_INIT_INTRO
	LDA	#0
	STA	SELECTED_MAP
	LDA	#1
	STA	DIFF_LEVEL

	LDA	#COLOR_GRAY_6
	STA	CUSTOM_PALETTES+0
	STA	CUSTOM_PALETTES+3
	STA	CUSTOM_PALETTES+6
	LDA	#COLOR_GRAY_A
	STA	CUSTOM_PALETTES+1
	STA	CUSTOM_PALETTES+4
	STA	CUSTOM_PALETTES+7
	LDA	#COLOR_WHITE
	STA	CUSTOM_PALETTES+2
	STA	CUSTOM_PALETTES+5

	; LDA	#$15
	; STA	CUSTOM_PALETTES_UI+0
	; LDA	#$25
	; STA	CUSTOM_PALETTES_UI+1
	
	; LDA	#$1B
	; STA	CUSTOM_PALETTES_GF+0
	; LDA	#$2B
	; STA	CUSTOM_PALETTES_GF+1
	; LDA	#$3A
	; STA	CUSTOM_PALETTES_GF+2
	
	; LDA	#$13
	; STA	CUSTOM_PALETTES_PL+0
	; LDA	#$22
	; STA	CUSTOM_PALETTES_PL+1
	; LDA	#$36
	; STA	CUSTOM_PALETTES_PL+2

	JSR	SOUND_SYSTEM_SFX_INIT
.endproc

.proc INIT_INTRO
	WAIT_NMI
	PPU_DISABLE

	SEI	; disable IRQs
	SET_IRQ_ROUTINE  DUMMY_ROUTINE
	SET_NMI_ROUTINE  DUMMY_ROUTINE
	WAIT_NMI

	MMC3_MIRROR_VERTICAL
	MMC3_BANK_SELECT  MMC3_PRG_0, #BK_GENERAL, SAVED_PRG_0
	MMC3_BANK_SELECT  MMC3_PRG_1, #BK_INTRO_CODE, SAVED_PRG_1

	JSR	SOUND_SYSTEM_MUSIC_PLAY__INTRO
	JMP	ENTRY_INTRO
.endproc

.proc INIT_INTRO_
	WAIT_NMI
	PPU_DISABLE

	SEI	; disable IRQs
	SET_IRQ_ROUTINE  DUMMY_ROUTINE
	SET_NMI_ROUTINE  DUMMY_ROUTINE
	WAIT_NMI

	MMC3_MIRROR_VERTICAL
	MMC3_BANK_SELECT  MMC3_PRG_0, #BK_GENERAL, SAVED_PRG_0
	MMC3_BANK_SELECT  MMC3_PRG_1, #BK_INTRO_CODE, SAVED_PRG_1

	JMP	ENTRY_INTRO
.endproc


.segment BANK(BK_INTRO_CODE)

.proc ENTRY_INTRO
	BIT	PPUSTATUS
	PPU_LOAD_BG_PALETTE   INTRO_BG_PALETTE_DATA_1
	PPU_LOAD_SPR_PALETTE  INTRO_SPR_PALETTE_DATA

	LDA	#0
	STA	MENUY
	STA	MENU_MORE
	STA	INTRO_ANIM

	MMC3_BANK_SELECT  MMC3_CHR_0, #TS_INTRO_1+0
	MMC3_BANK_SELECT  MMC3_CHR_1, #TS_INTRO_1+2
	MMC3_BANK_SELECT  MMC3_CHR_2, #TS_INTRO_SPRITES+0
	MMC3_BANK_SELECT  MMC3_CHR_3, #TS_INTRO_SPRITES+1
	MMC3_BANK_SELECT  MMC3_CHR_4, #TS_INTRO_SPRITES+2
	MMC3_BANK_SELECT  MMC3_CHR_5, #TS_INTRO_SPRITES+3

	OAM_HIDE_ALL_SPRITE
	OAM_COPY_SPRITE_ENTRIES  INTRO_SPR_DATA, 0, 25

	JSR	DISPLAY_INTRO

	SET_NMI_ROUTINE  NMI_INTRO
	WAIT_NMI
	PPU_DISABLE
	
	SET_IRQ_ROUTINE  IRQ_INTRO
	MMC3_IRQ_DISABLE
	CLI

	WAIT_FRAMES  30
.endproc


.proc INTRO_LOOP
	WAIT_NMI
	JSR	READ_JOYPAD

	JOYPAD_BR_IF_D_NOT_PRESSED :+
	JMP	EXEC_COMMAND_D
:
	JOYPAD_BR_IF_U_NOT_PRESSED :+
	JMP	EXEC_COMMAND_U
:
	JOYPAD_BR_IF_R_NOT_PRESSED :+
	JMP	EXEC_COMMAND_R
:
	JOYPAD_BR_IF_L_NOT_PRESSED :+
	JMP	EXEC_COMMAND_L
:
	JOYPAD_BR_IF_START_NOT_PRESSED :+
	JMP	EXEC_COMMAND_A
:

	JOYPAD_BR_IF_A_NOT_PRESSED :+
	JMP	EXEC_COMMAND_A
:
	JMP	INTRO_LOOP
.endproc


.proc EXEC_COMMAND_A
	LDA	MENUY

	; START GAME
	CMP	#0
	BNE	:+
	; JSR	SOUND_SYSTEM_MUSIC_STOP
	LDA	SELECTED_SONG
	BNE	@skip
	JSR	SOUND_SYSTEM_MUSIC_PLAY__IN_GAME
@skip:	JSR	SOUND_SYSTEM_MUSIC_PAUSE
	LDADDR	PTR_0, $0000
	JMP	INIT_GAME
:
	; CYCLE MAP
	CMP	#1
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_MAP_R
	JMP	INTRO_LOOP
:
	; DIFF LEVEL
	CMP	#2
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_DIFF_LEVEL_R
	JMP	INTRO_LOOP
:
	; MORE
	CMP	#3
	BNE	:+
	JMP	EXEC_COMMAND_MORE
:	
	; ELSE
	JMP	INTRO_LOOP
.endproc

.proc EXEC_COMMAND_MORE
	LDA	MENU_MORE

	; CREDITS
	CMP	#1
	BNE	:+
	JMP	INIT_MUSICPLAYER
:
	; SETTINGS
	CMP	#2
	BNE	:+
	JMP	INIT_SETTINGS
:
	; HELP
	CMP	#3
	BNE	:+
	JMP	INIT_HELP
:	
	; ELSE
	JMP	INTRO_LOOP
.endproc

.proc EXEC_COMMAND_U
	LDA	MENUY
	CMP	#0
	BEQ	:+
	DEC	MENUY
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
:	JMP	INTRO_LOOP
.endproc

.proc EXEC_COMMAND_D
	LDA	MENUY
	CMP	#3
	BEQ	:+
	INC	MENUY
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
:	JMP	INTRO_LOOP
.endproc

.proc EXEC_COMMAND_R
	LDA	MENUY

	; CYCLE MAP
	CMP	#1
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_MAP_R
	JMP	INTRO_LOOP
:
	; DIFF LEVEL
	CMP	#2
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_DIFF_LEVEL_R
	JMP	INTRO_LOOP
:
	; MORE
	CMP	#3
	BNE	:+
	JSR	CYCLE_MORE_R
:	JMP	INTRO_LOOP
.endproc

.proc EXEC_COMMAND_L
	LDA	MENUY

	; CYCLE MAP
	CMP	#1
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_MAP_L
	JMP	INTRO_LOOP
:
	; DIFF LEVEL
	CMP	#2
	BNE	:+
	LDA	#15	;menu beep
	JSR	SOUND_SYSTEM_SFX_PLAY
	JSR	CYCLE_DIFF_LEVEL_L
	JMP	INTRO_LOOP
:
	; MORE
	CMP	#3
	BNE	:+
	JSR	CYCLE_MORE_L
:	JMP	INTRO_LOOP
.endproc


.proc CYCLE_MORE_R
	INC	MENU_MORE
	LDA	MENU_MORE
	CMP	#4
	BNE	@skip
	LDA	#1
	STA	MENU_MORE
@skip:	RTS
.endproc

.proc CYCLE_MORE_L
	DEC	MENU_MORE
	LDA	MENU_MORE
	CMP	#0
	BEQ	@set
	CMP	#$FF
	BEQ	@set
	RTS
@set:	LDA	#3
	STA	MENU_MORE
	RTS
.endproc


.proc CYCLE_MAP_R
	INC	SELECTED_MAP
	LDA	SELECTED_MAP
	CMP	MAP_NUM	;Maximum number of maps
	BNE	@skip
	LDA	#0
	STA	SELECTED_MAP
@skip:	RTS
.endproc

.proc CYCLE_MAP_L
	DEC	SELECTED_MAP
	LDA	SELECTED_MAP
	CMP	#$FF	;if overflowed
	BNE	@skip
	LDX	MAP_NUM
	DEX
	STX	SELECTED_MAP
@skip:	RTS
.endproc


.proc CYCLE_DIFF_LEVEL_R
	INC	DIFF_LEVEL
	LDA	DIFF_LEVEL
	CMP	#3
	BNE	@skip
	LDA	#0
	STA	DIFF_LEVEL
@skip:	JMP	UPDATE_ROBOT_FACE
.endproc

.proc CYCLE_DIFF_LEVEL_L
	DEC	DIFF_LEVEL
	LDA	DIFF_LEVEL
	CMP	#$FF
	BNE	@skip
	LDA	#2
	STA	DIFF_LEVEL
@skip:	JMP	UPDATE_ROBOT_FACE
.endproc

.proc UPDATE_ROBOT_FACE
	LDA	DIFF_LEVEL
	OAM_SET_SPRITE_TILE_A  $02 ; EYEBROWS
	OAM_SET_SPRITE_TILE_A  $03 ; EYEBROWS
	RTS
.endproc


.proc DISPLAY_INTRO
	BIT	PPUSTATUS
	PPU_WRITE_NT  0, INTRO_SCREEN_DATA

	PPU_LOAD_ADDR_XY  0, 27, 1
	LDX	TV_SYSTEM
	LDY	TV_CHAR_OFFSET,X
	.repeat 4, I
	LDA	TV_CHAR+I,Y
	STA	PPUDATA
	.endrepeat

	PPU_LOAD_ADDR_XY  0, 27, 2
	LDX	JOYPAD_TYPE
	LDY	JP_CHAR_OFFSET,X
	.repeat 4, I
	LDA	JP_CHAR+I,Y
	STA	PPUDATA
	.endrepeat

	PPU_LOAD_ADDR_XY  0, 18, 1
	LDX	#0
@loop:	LDA	BUILD_DATE,X
	INX
	CMP	#$FF
	BEQ	@end
	STA	PPUDATA
	JMP	@loop
@end:

	PPU_LOAD_ADDR_XY  0, 21, 2
	LDX	#0
@loop2:	LDA	BUILD_TIME,X
	INX
	CMP	#$FF
	BEQ	@end2
	STA	PPUDATA
	JMP	@loop2
@end2:

	RTS
.endproc

TV_CHAR_OFFSET: .BYTE 0, 4, 8, 12
TV_CHAR: 
	.BYTE "NTSC"
	.BYTE "PAL", $4D
	.BYTE "DEND"
	.BYTE "???", $4D
JP_CHAR_OFFSET: .BYTE 0, 4, 8
JP_CHAR: 
	.BYTE "NES", $4D
	.BYTE "SNES"
	.BYTE "???", $4D


